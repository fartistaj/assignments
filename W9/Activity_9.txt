 1.
	  10
        /    \
      9       8
    /   \    /  \
   6     5  7    4
  / \   / 
 2   1 3


	  10           // In a heap, we always inserts at the leftmost available position to keep the tree complete
        /    \            So, 11 is inserted as the right child of 5.
       9      8
     /   \   /  \
    6     5 7    4
   / \   / \
  2   1 3   11

         
          10
        /    \         // Since 11 > 5, swap 11 and 5.
       9      8
     /   \   /  \
    6    11 7    4
   / \   / \ 
  2  1  3   5
 

          10
        /    \         // Since 11 > 9, swap 11 and 9.
      11      8
     /  \    / \
    6    9  7   4
   / \  / \ 
  2   1 3  5


          11
        /    \        // Since 11 > 10, swap 11 and 10. 
      10      8
     /  \    / \
    6    9  7   4
   / \  / \
  2  1 3   5


2.
          11
        /    \        
      10      8
     /  \    / \
    6    9  7   4
   / \  / \
  2  1 3   5


          5
        /   \         // In heap, when we delete the root, we replace it with the last node.
      10     8           The last node is 5.
     /  \   /  \    
    6    9 7    4
   / \  /
  2  1 3


          10
        /    \        // Compare 5 with its children (10 and 8)
       5      8          The larger child is 10. Since 10 > 5, swap 5 and 10.
     /  \   /   \
    6    9 7     4
   / \   /
  2   1 3


          10  
        /    \        // Compare 5 with its childeren (6 and 
       9      8          The larger childe is 9. Since 9 > 5, swap 5 and 9.
     /   \  /   \        Now, 5 is at the right child of 9 and it's childeren are 1 and 3.
    6     5 7    4       The larger child is 3. Since 5 > 3, so no more swapping is needed.
   / \   /
  2   1 3


3.
         99
       /    \
      55    68
     /  \  /  
    10  2  34
          /
         2

     
        68 
       /   \          // 99 is popped and replace 99 with 22
      55   22            compare 22 with 55 and 68. Swap 22 and 68.
     /  \  /
    10  2 34


       55
      /  \            // 68 is popped and replace 68 with 34.
     34  22              compare 34 with 55 and 22. Swap 34 and 55.
    /  \ 
   10  2


       34
      /  \            // 55 is popped and replace 55 with 22.
     2   22             compare 2 with 34 and 22. Swap 2 and 34.
    / 
   10


       22
      /  \            // 22 is popped and replace 22 with 10.
     2    10             compare 10 and 2. 10 > 2, no swap needed.


       10
      /               // 10 is popped and replace 10 with 2.
     2 


       2              // 2 is popped. Heap is empty.

  
  Array: [99, 68, 55, 34, 22, 10, 2] 

 

      




